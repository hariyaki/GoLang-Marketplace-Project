// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Harrison Lisk"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/listings": {
            "get": {
                "description": "When the optional **q** query parameter is supplied, the results are filtered (case-insensitive substring match on *title*).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "listings"
                ],
                "summary": "List all listings or search by title",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Title search keyword",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.Listing"
                            }
                        },
                        "headers": {
                            "X-Cache": {
                                "type": "string",
                                "description": "HIT or MISS"
                            }
                        }
                    },
                    "500": {
                        "description": "database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Inserts a listing row and returns the created object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "listings"
                ],
                "summary": "Create a new listing",
                "parameters": [
                    {
                        "description": "Listing payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.postListingRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.Listing"
                        }
                    },
                    "400": {
                        "description": "invalid JSON or missing fields",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/listings/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "listings"
                ],
                "summary": "Retrieve a single listing",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Listing ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Listing"
                        },
                        "headers": {
                            "X-Cache": {
                                "type": "string",
                                "description": "HIT or MISS"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "db.Listing": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "price_jpy": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handlers.postListingRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "price_jpy": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Marketplace API",
	Description:      "Simple product listing service for GoLang practice.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
